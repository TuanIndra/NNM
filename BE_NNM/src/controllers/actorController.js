const Actor = require("../models/Actor");
const Movie = require("../models/Movie");

exports.getAllActors = async (req, res) => {
    try {
        const actors = await Actor.find().populate("knownForMovies", "title releaseYear");
        res.status(200).json(actors);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch di·ªÖn vi√™n", error });
    }
};

// üü¢ L·∫•y th√¥ng tin chi ti·∫øt 1 di·ªÖn vi√™n theo ID (bao g·ªìm phim)
exports.getActorById = async (req, res) => {
    try {
        const actor = await Actor.findById(req.params.id)
            .populate("knownForMovies", "title releaseYear genre");
        if (!actor) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y di·ªÖn vi√™n" });
        res.status(200).json(actor);
    } catch (error) {
        res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin di·ªÖn vi√™n", error });
    }
};

exports.createActor = async (req, res) => {
    try {
        const { name, birthDate, birthPlace, knownForMovies = [], profileImage, photos = [] } = req.body;

        if (!name) {
            return res.status(400).json({ message: "T√™n di·ªÖn vi√™n l√† b·∫Øt bu·ªôc!" });
        }

        // Ki·ªÉm tra v√† l·ªçc c√°c Movie ID h·ª£p l·ªá
        const validMovies = await Movie.find({ _id: { $in: knownForMovies } });
        const movieIds = validMovies.map((movie) => movie._id.toString());

        const newActor = new Actor({
            name,
            birthDate,
            birthPlace,
            knownForMovies: movieIds,
            profileImage, 
            photos  // ‚úÖ Th√™m danh s√°ch ·∫£nh v√†o ƒë√¢y
        });

        const savedActor = await newActor.save();
        res.status(201).json(savedActor);  // ‚úÖ Tr·∫£ v·ªÅ status 201 khi th√†nh c√¥ng
    } catch (error) {
        res.status(400).json({ message: "L·ªói khi th√™m di·ªÖn vi√™n", error });  // ‚úÖ S·ª≠a l·∫°i th√†nh res.status(400)
    }
};


// üü¢ C·∫≠p nh·∫≠t th√¥ng tin di·ªÖn vi√™n theo ID
exports.updateActor = async (req, res) => {
    try {
        const { name, birthDate, birthPlace, knownForMovies, profileImage, photos } = req.body;

        // L·∫•y di·ªÖn vi√™n hi·ªán t·∫°i ƒë·ªÉ gi·ªØ nguy√™n profileImage n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi
        const existingActor = await Actor.findById(req.params.id);
        if (!existingActor) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y di·ªÖn vi√™n" });

        if (!name) {
            return res.status(400).json({ message: "T√™n di·ªÖn vi√™n l√† b·∫Øt bu·ªôc!" });
        }

        let movieIds = existingActor.knownForMovies.map((id) => id.toString());
        if (knownForMovies) {
            const validMovies = await Movie.find({ _id: { $in: knownForMovies } });
            movieIds = validMovies.map((movie) => movie._id.toString());

            // X√°c ƒë·ªãnh phim b·ªã x√≥a v√† th√™m
            const oldMovies = existingActor.knownForMovies.map((id) => id.toString());
            const moviesToRemove = oldMovies.filter((id) => !movieIds.includes(id));
            const moviesToAdd = movieIds.filter((id) => !oldMovies.includes(id));

            // X√≥a actorId kh·ªèi actors c·ªßa c√°c phim b·ªã x√≥a
            if (moviesToRemove.length > 0) {
                await Movie.updateMany(
                    { _id: { $in: moviesToRemove } },
                    { $pull: { actors: req.params.id } }
                );
            }

            // Th√™m actorId v√†o actors c·ªßa c√°c phim m·ªõi
            if (moviesToAdd.length > 0) {
                await Movie.updateMany(
                    { _id: { $in: moviesToAdd } },
                    { $addToSet: { actors: req.params.id } }
                );
            }
        }

        const updatedActor = await Actor.findByIdAndUpdate(
            req.params.id,
            {
                name,
                birthDate,
                birthPlace,
                profileImage: profileImage || existingActor.profileImage,  // ‚úÖ Gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ ·∫£nh m·ªõi
                knownForMovies: movieIds,
                photos: photos || existingActor.photos  // ‚úÖ Gi·ªØ nguy√™n n·∫øu kh√¥ng c√≥ c·∫≠p nh·∫≠t ·∫£nh
            },
            { new: true }
        ).populate("knownForMovies", "title releaseYear");

        res.status(200).json(updatedActor);
    } catch (error) {
        console.error("Error updating actor:", error);
        res.status(400).json({ message: "L·ªói khi c·∫≠p nh·∫≠t di·ªÖn vi√™n", error });
    }
};

exports.deleteActor = async (req, res) => {
    try {
        const deletedActor = await Actor.findByIdAndDelete(req.params.id);
        if (!deletedActor) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y di·ªÖn vi√™n" });

        // X√≥a actorId kh·ªèi actors c·ªßa t·∫•t c·∫£ phim li√™n quan
        await Movie.updateMany(
            { actors: req.params.id },
            { $pull: { actors: req.params.id } }
        );

        res.status(200).json({ message: "X√≥a di·ªÖn vi√™n th√†nh c√¥ng" });
    } catch (error) {
        console.error("Error deleting actor:", error);
        res.status(500).json({ message: "L·ªói khi x√≥a di·ªÖn vi√™n", error });
    }
};