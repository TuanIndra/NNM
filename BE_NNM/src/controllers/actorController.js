const Actor = require("../models/Actor");
const Movie = require("../models/Movie");

// ğŸŸ¢ Láº¥y danh sÃ¡ch táº¥t cáº£ diá»…n viÃªn (kÃ¨m danh sÃ¡ch phim)
exports.getAllActors = async (req, res) => {
    try {
        const actors = await Actor.find().populate("knownForMovies", "title releaseYear");
        res.status(200).json(actors);
    } catch (error) {
        res.status(500).json({ message: "Lá»—i khi láº¥y danh sÃ¡ch diá»…n viÃªn", error });
    }
};

// ğŸŸ¢ Láº¥y thÃ´ng tin chi tiáº¿t 1 diá»…n viÃªn theo ID (bao gá»“m phim vÃ  áº£nh liÃªn quan)
exports.getActorById = async (req, res) => {
    try {
        const actor = await Actor.findById(req.params.id)
            .populate("knownForMovies", "title releaseYear genre");
        if (!actor) return res.status(404).json({ message: "KhÃ´ng tÃ¬m tháº¥y diá»…n viÃªn" });

        res.status(200).json(actor);
    } catch (error) {
        res.status(500).json({ message: "Lá»—i khi láº¥y thÃ´ng tin diá»…n viÃªn", error });
    }
};

// ğŸŸ¢ ThÃªm má»›i má»™t diá»…n viÃªn (cÃ³ thá»ƒ kÃ¨m danh sÃ¡ch phim vÃ  áº£nh liÃªn quan)
exports.createActor = async (req, res) => {
    try {
        const { name, birthDate, birthPlace, knownForMovies = [], profileImage, photos = [] } = req.body;

        // Kiá»ƒm tra xem cÃ¡c Movie ID cÃ³ há»£p lá»‡ khÃ´ng
        const validMovies = await Movie.find({ _id: { $in: knownForMovies } });
        const movieIds = validMovies.map(movie => movie._id);

        // Táº¡o Actor má»›i
        const newActor = new Actor({
            name,
            birthDate,
            birthPlace,
            knownForMovies: movieIds,
            profileImage, 
            photos  // âœ… ThÃªm danh sÃ¡ch áº£nh vÃ o Ä‘Ã¢y
        });

        const savedActor = await newActor.save();
        res.status(201).json(savedActor);
    } catch (error) {
        res.status(400).json({ message: "Lá»—i khi thÃªm diá»…n viÃªn", error });
    }
};

// ğŸŸ¢ Cáº­p nháº­t thÃ´ng tin diá»…n viÃªn theo ID (bao gá»“m cáº£ danh sÃ¡ch áº£nh)
exports.updateActor = async (req, res) => {
    try {
        const { name, birthDate, birthPlace, knownForMovies, profileImage, photos } = req.body;

        // Láº¥y diá»…n viÃªn hiá»‡n táº¡i Ä‘á»ƒ giá»¯ nguyÃªn giÃ¡ trá»‹ náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u má»›i
        const existingActor = await Actor.findById(req.params.id);
        if (!existingActor) return res.status(404).json({ message: "KhÃ´ng tÃ¬m tháº¥y diá»…n viÃªn" });

        // Náº¿u cÃ³ cáº­p nháº­t danh sÃ¡ch phim, kiá»ƒm tra Movie ID há»£p lá»‡
        let movieIds = existingActor.knownForMovies;
        if (knownForMovies) {
            const validMovies = await Movie.find({ _id: { $in: knownForMovies } });
            movieIds = validMovies.map(movie => movie._id);
        }

        const updatedActor = await Actor.findByIdAndUpdate(
            req.params.id,
            {
                name,
                birthDate,
                birthPlace,
                profileImage: profileImage || existingActor.profileImage,  // âœ… Giá»¯ nguyÃªn náº¿u khÃ´ng cÃ³ áº£nh má»›i
                knownForMovies: movieIds,
                photos: photos || existingActor.photos  // âœ… Giá»¯ nguyÃªn náº¿u khÃ´ng cÃ³ cáº­p nháº­t áº£nh
            },
            { new: true }
        );

        res.status(200).json(updatedActor);
    } catch (error) {
        res.status(400).json({ message: "Lá»—i khi cáº­p nháº­t diá»…n viÃªn", error });
    }
};

// ğŸŸ¢ XÃ³a diá»…n viÃªn theo ID
exports.deleteActor = async (req, res) => {
    try {
        const deletedActor = await Actor.findByIdAndDelete(req.params.id);
        if (!deletedActor) return res.status(404).json({ message: "KhÃ´ng tÃ¬m tháº¥y diá»…n viÃªn" });
        res.status(200).json({ message: "XÃ³a diá»…n viÃªn thÃ nh cÃ´ng" });
    } catch (error) {
        res.status(500).json({ message: "Lá»—i khi xÃ³a diá»…n viÃªn", error });
    }
};
